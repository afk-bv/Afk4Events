// <auto-generated />
using System;
using Afk4Events.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Afk4Events.Data.Migrations
{
    [DbContext(typeof(Afk4EventsContext))]
    [Migration("20190509185132_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Afk4Events.Data.Entities.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<Guid>("CreatedById");

                    b.Property<Guid>("GroupId");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<Guid?>("PickedDateId");

                    b.Property<Guid?>("PickedDateId1");

                    b.Property<string>("ThemeId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GroupId");

                    b.HasIndex("PickedDateId1");

                    b.HasIndex("ThemeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Afk4Events.Data.Entities.Events.EventDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("End");

                    b.Property<Guid>("EventId");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventDates");
                });

            modelBuilder.Entity("Afk4Events.Data.Entities.Groups.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Afk4Events.Data.Entities.Themes.Theme", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250);

                    b.Property<string>("Css");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("Afk4Events.Data.Entities.UserAvailabilities.UserAvailability", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("EventDateId");

                    b.Property<int>("AvailabilityKind");

                    b.Property<string>("Comment");

                    b.HasKey("UserId", "EventDateId");

                    b.HasIndex("EventDateId");

                    b.ToTable("UserAvailabilities");
                });

            modelBuilder.Entity("Afk4Events.Data.Entities.UserGroups.UserGroup", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GroupId");

                    b.Property<bool>("IsAdmin");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Afk4Events.Data.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ProfilePictureUrl");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GoogleId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FriendlyName");

                    b.Property<string>("Xml");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Afk4Events.Data.Entities.Events.Event", b =>
                {
                    b.HasOne("Afk4Events.Data.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Afk4Events.Data.Entities.Groups.Group", "Group")
                        .WithMany("Events")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Afk4Events.Data.Entities.Events.EventDate", "PickedDate")
                        .WithMany()
                        .HasForeignKey("PickedDateId1");

                    b.HasOne("Afk4Events.Data.Entities.Themes.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Afk4Events.Data.Entities.Events.EventDate", b =>
                {
                    b.HasOne("Afk4Events.Data.Entities.Events.Event", "Event")
                        .WithMany("EventDates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Afk4Events.Data.Entities.UserAvailabilities.UserAvailability", b =>
                {
                    b.HasOne("Afk4Events.Data.Entities.Events.EventDate", "EventDate")
                        .WithMany("UserAvailabilities")
                        .HasForeignKey("EventDateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Afk4Events.Data.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Afk4Events.Data.Entities.UserGroups.UserGroup", b =>
                {
                    b.HasOne("Afk4Events.Data.Entities.Groups.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Afk4Events.Data.Entities.Users.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
